package com.example.uploaddownloadapi1.controller;import com.example.uploaddownloadapi1.service.FileStorageService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.io.FileSystemResource;import org.springframework.core.io.InputStreamResource;import org.springframework.core.io.Resource;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.File;import java.io.IOException;import java.nio.file.DirectoryStream;import java.nio.file.Files;import java.nio.file.Path;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;import java.util.stream.Collectors;import java.util.stream.StreamSupport;@RestControllerpublic class FileManagerController {    @Autowired    private FileStorageService fileStorageService;    private static final Logger log = Logger.getLogger(FileManagerController.class.getName());    @PostMapping("/upload-file")    public boolean upload (@RequestParam("file")MultipartFile file) {        try {            fileStorageService.saveFile(file);            return true;        }catch (IOException e) {            log.log(Level.SEVERE, "Exception during upload", e);        }        return false;    }    @GetMapping("/download-faster")    public ResponseEntity<Resource> downloadFileFaster (@RequestParam("filename")String filename) {        try {            File filePath = fileStorageService.getDownload(filename);            Resource resource = new FileSystemResource(filePath);            return ResponseEntity.ok()                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" +filename +"\"")                    .contentLength(Files.size(filePath.toPath()))                    .contentType(MediaType.APPLICATION_OCTET_STREAM)                    .body(resource);        } catch (Exception e) {            return ResponseEntity.notFound().build();        }    }    @GetMapping("/list-of-files")    public ResponseEntity<List<String>> listFiles () {        try {            Files.createDirectories(new File(FileStorageService.STORAGE_DIRECTORY).toPath());            List<String> fileNames;            try(DirectoryStream<Path> stream =                    Files.newDirectoryStream(new File(FileStorageService.STORAGE_DIRECTORY).toPath())) {                fileNames = StreamSupport.stream(stream.spliterator(), false)                        .map(Path::getFileName)                        .map(Path::toString)                        .collect(Collectors.toList());            }            return ResponseEntity.ok(fileNames);        } catch (IOException e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();        }    }}